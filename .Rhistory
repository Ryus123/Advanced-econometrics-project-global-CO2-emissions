etat = 1:500
etat
etat = etat*2
etat
sum(1/etat)
etat
sum(0.5 - (1/etat) )
knitr::opts_chunk$set(echo = TRUE)
# Fonction objectif à minimiser: on commence par tester avec une fonction simple dont on connais le minimum
fonction_minimiser_1 <- function(x) {
return((x - 3)^2)
}
f1_deriv <- function(x){2*x-6}
k = seq(0,10, by=0.1)
plot(fonction_minimiser_1(k)~k, lwd=3, type="l", main="Graphique de f(x)",
xlab="x", ylab="f(x)")
lines(f1_deriv(k)~k, col="blue", lwd=3)
abline(h=0, v=3, col="red", xlim=c(2,4), lwd=1)
legend("topleft", c("f(x)", "f'(x)"), col=c("red", "blue"), lty = 1, cex=0.7)
fonction_minimiser_2 <- function(x) {
n = length(x)
return(10 * n + sum(x^2 - 10 * cos(2 * pi * x)))
}
f2_deriv <- function(x){sum(2*x + 2*pi*10*sin(2*pi*x) )}
k = seq(-10,10, by=0.1)
minimiser_2 = c()
deriv_2 = c()
for (i in k){
minimiser_2 = c(minimiser_2, fonction_minimiser_2(i))
}
for (i in k){
deriv_2 = c(deriv_2, f2_deriv(i))
}
plot(minimiser_2~k, lwd=3, type="l", main="Graphique fonction de Rastrigin",
xlab="x", ylab="f(x)")
lines(deriv_2~k, col="blue", lwd=2)
abline(h=0, col="red", xlim=c(2,4))
legend("topleft", c("f(x)", "f'(x)"), col=c("red", "blue"), lty = 1, cex=0.7)
ite_t = 1:100
f_temp = 5/log(ite_t)
plot(x=ite_t, y=f_temp, main='Fonction de temps en fonction de l\'itération',
ylab="5/log(i)", xlab="itération (i)")
plot(minimiser_2~k, lwd=3, type="l", main="Représentation des montagnes",
xlab="x", ylab="f(x)")
points(x=-8.5, y=95,pch=9, col="green", lwd=3)
abline(h=0, col="red", xlim=c(2,4))
E = seq(-10,10, by=0.05)
Q <-function(Etat){
dimE = length(Etat)
res = matrix(rep(NA, dimE**2), ncol = dimE, byrow = T)
for ( e in 1:dimE){
res[e,] = abs( sort( rnorm(dimE, e , 2 ) ) )
res[e,] = res[e, ]/sum(res[e,])
}
return(res)
}
Q_trans = Q(E)
all( (Q_trans>0) == TRUE)
Q_trans[5,5] >0
#Fonction de simulation de Y
Y <- function(etat_i, Q){
u = runif(1) #simule U selon une loi uniforme sur [0;1]
Qi = cumsum( Q[etat_i,] ) #Créer un vecteur des proba cumulé sur Q_i
res = sum(Qi <= u) + 1 #Renvoie l'état avec la proba cumulée inférieur ou égale au U simulé
return(res)
}
ech_10
replicate(10, recuit_simule_0(E , fonction_minimiser_2, -10, 10))
knitr::opts_chunk$set(echo = TRUE)
# Fonction objectif à minimiser: on commence par tester avec une fonction simple dont on connais le minimum
fonction_minimiser_1 <- function(x) {
return((x - 3)^2)
}
f1_deriv <- function(x){2*x-6}
k = seq(0,10, by=0.1)
plot(fonction_minimiser_1(k)~k, lwd=3, type="l", main="Graphique de f(x)",
xlab="x", ylab="f(x)")
lines(f1_deriv(k)~k, col="blue", lwd=3)
abline(h=0, v=3, col="red", xlim=c(2,4), lwd=1)
legend("topleft", c("f(x)", "f'(x)"), col=c("red", "blue"), lty = 1, cex=0.7)
fonction_minimiser_2 <- function(x) {
n = length(x)
return(10 * n + sum(x^2 - 10 * cos(2 * pi * x)))
}
f2_deriv <- function(x){sum(2*x + 2*pi*10*sin(2*pi*x) )}
k = seq(-10,10, by=0.1)
minimiser_2 = c()
deriv_2 = c()
for (i in k){
minimiser_2 = c(minimiser_2, fonction_minimiser_2(i))
}
for (i in k){
deriv_2 = c(deriv_2, f2_deriv(i))
}
plot(minimiser_2~k, lwd=3, type="l", main="Graphique fonction de Rastrigin",
xlab="x", ylab="f(x)")
lines(deriv_2~k, col="blue", lwd=2)
abline(h=0, col="red", xlim=c(2,4))
legend("topleft", c("f(x)", "f'(x)"), col=c("red", "blue"), lty = 1, cex=0.7)
ite_t = 1:100
f_temp = 5/log(ite_t)
plot(x=ite_t, y=f_temp, main='Fonction de temps en fonction de l\'itération',
ylab="5/log(i)", xlab="itération (i)")
plot(minimiser_2~k, lwd=3, type="l", main="Représentation des montagnes",
xlab="x", ylab="f(x)")
points(x=-8.5, y=95,pch=9, col="green", lwd=3)
abline(h=0, col="red", xlim=c(2,4))
E = seq(-10,10, by=0.05)
Q <-function(Etat){
dimE = length(Etat)
res = matrix(rep(NA, dimE**2), ncol = dimE, byrow = T)
for ( e in 1:dimE){
res[e,] = abs( sort( rnorm(dimE, e , 2 ) ) )
res[e,] = res[e, ]/sum(res[e,])
}
return(res)
}
Q_trans = Q(E)
all( (Q_trans>0) == TRUE)
Q_trans[5,5] >0
#Fonction de simulation de Y
Y <- function(etat_i, Q){
u = runif(1) #simule U selon une loi uniforme sur [0;1]
Qi = cumsum( Q[etat_i,] ) #Créer un vecteur des proba cumulé sur Q_i
res = sum(Qi <= u) + 1 #Renvoie l'état avec la proba cumulée inférieur ou égale au U simulé
return(res)
}
recuit_simule_0 = function(Etat, fonction_minimiser, pos_initiale, nbr_iterations_prevu){
solution_actuelle = pos_initiale
#On se donne X_0 un etat tel que pi_u[X_0] >0
cout_actuel = fonction_minimiser(solution_actuelle) #Hauteur de la colline actuelle (valeur de la fonction en le point initiale)
meilleure_solution = solution_actuelle #Variable de la position au temps t
meilleur_cout = cout_actuel #Coût de passage entre t et t+1
liste_deplacement = c(solution_actuelle)  #liste de l'ensemble des déplacements (x)
liste_cout = c(cout_actuel) #liste des coûts associés à chaque déplacement
for (i in 1:nbr_iterations_prevu){
temps = 5/log(i)  #Fonction représentative du temps
solution_propose = Etat[ Y(1, Q_trans) ]    # La solution proposé est le déplacement aléatoire possible. C'est la proposition Y; c'est ici que notre matrice Q intervient afin de proposer un Y
cout_propose = fonction_minimiser(solution_propose)  # hauteur de la colline sur laquel on voudrait aller ensuite
# comparaison entre le cout actuel (hauteur de la colline actuelle) et le nouveau coût (hauteur de la nouvelle colline)
etat_i = which(E == solution_actuelle) #Numero de l'etat actuelle dans Q
etat_j = which(E == solution_propose) #Numero de l'etat popososé dans Q
pi_u_j = exp( - (cout_propose)/temps) * Q_trans[etat_j , etat_i]
pi_u_i = exp(- (cout_actuel)/temps) * Q_trans[etat_i , etat_j ]
pi_i_j = (pi_u_j/pi_u_i) #Rapport d'acceptation
u = runif(1) #Variable simulé selon une loi uniforme sur 0;1
if( u <= pi_i_j ){ #exp((cout_actuel - cout_propose)/temps)){ # calcul de probabilité d'acceptation d'aller sur la nouvemlle colline: on y va si on a soit une hauteur moins imposante soit on y va avec une proba [0,1] représenté par exp((cout_actuel - cout_propose)/temps)
solution_actuelle = solution_propose
cout_actuel = cout_propose
liste_deplacement= c(liste_deplacement, solution_actuelle)
liste_cout = c(liste_cout, cout_actuel)
# mise à jour de la meilleure solution si la nouvelle solution est meilleure
if(cout_actuel < meilleur_cout){
meilleure_solution = solution_actuelle
meilleur_cout = cout_actuel
}
}
}
par(mfrow=c(1,2))
plot(liste_cout~liste_deplacement, type="b", xlim= c(-10,10), main="Coût engendré par déplacement",
xlab="déplacement", ylab="coût")
points(meilleur_cout~meilleure_solution, col="red",pch=9)
text(x=min(Etat)+2, y=min(liste_cout)+2, paste('x', '=', round(meilleure_solution,2)), cex=0.7)
plot(x=Etat, y=sapply(E, fonction_minimiser), col="green", xlim= c(-10,10), type="l", main="Fonction à minimiser",
xlab="x", ylab="fonction à minimiser")
return(list(x_min=meilleure_solution, l_deplacement = unlist(liste_deplacement)))
}
#Test de l'algorithme sur la fonction continue, convexe et differentiable
recuit_simule_0(E , fonction_minimiser_1, -10, 50)
recuit_simule_0(E , fonction_minimiser_2, -10, 50)
recuit_simule_0(E , fonction_minimiser_2, -10, 50)
replicate(3, recuit_simule_0(E , fonction_minimiser_2, -10, 10))
replicate(3, recuit_simule_0(E , fonction_minimiser_2, -10, 10), simplify = F)
replicate(3, recuit_simule_0(E , fonction_minimiser_2, -10, 10), simplify = F)["x_min",]
replicate(3, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]
unlist(replicate(3, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",])
#Convergence par le nombre d'itération
ech_10 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]) #Liste des minimums trouvés après avoir lancé l'algorithme 100 fois pour un nombre d'itération 10
ech_20 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 20))["x_min",])
ech_50 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 50))["x_min",])
ech_100 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 100))["x_min",])
ech_200 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 200))["x_min",])
mat_ech = data.frame( n_10 =ech_10,  n_20 =ech_20 ,  n_50 =ech_50,  n_100 =ech_100, n_200 = ech_200)
matplot(1:100 , mat_ech, type="l", lwd = 3)
matplot(1:100 , mat_ech, type="l", lwd = 3)
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé")
#Convergence par le nombre d'itération
ech_10 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]) #Liste des minimums trouvés après avoir lancé l'algorithme 100 fois pour un nombre d'itération 10
ech_20 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 20))["x_min",])
ech_50 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 50))["x_min",])
ech_100 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 100))["x_min",])
ech_200 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 200))["x_min",])
mat_ech = data.frame( n_10 =ech_10,  n_20 =ech_20 ,  n_50 =ech_50,  n_100 =ech_100, n_200 = ech_200)
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6))
legend("bottomleft", c("i=10", "i=20", "i=50", "i=100", "i=200",))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6))
legend("bottomleft", c("i=10", "i=20", "i=50", "i=100", "i=200"))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col=,col = rainbow(5))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(5))
legend("bottomleft", c("i=10", "i=20", "i=50", "i=100", "i=200"), col = rainbow(5))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(5))
legend("bottomleft", legend=c("i=10", "i=20", "i=50", "i=100", "i=200"), lwd=3,col = rainbow(5))
ech_10 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]) #Liste des minimums trouvés après avoir lancé l'algorithme 100 fois pour un nombre d'itération 10
ech_50 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 50))["x_min",])
ech_200 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 200))["x_min",])
mat_ech = data.frame( n_10 =ech_10, n_50 =ech_50, n_200 = ech_200)
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(5))
legend("bottomleft", legend=c("i=10", "i=20", "i=50", "i=100", "i=200"), lwd=3,col = rainbow(5))
#Convergence par le nombre d'itération
ech_10 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]) #Liste des minimums trouvés après avoir lancé l'algorithme 100 fois pour un nombre d'itération 10
ech_50 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 50))["x_min",])
ech_200 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 200))["x_min",])
mat_ech = data.frame( n_10 =ech_10, n_50 =ech_50, n_200 = ech_200)
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(3))
legend("bottomleft", legend=c("i=10", "i=20", "i=50", "i=100", "i=200"), lwd=3,col = rainbow(3))
ech_10 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 10))["x_min",]) #Liste des minimums trouvés après avoir lancé l'algorithme 100 fois pour un nombre d'itération 10
ech_50 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 50))["x_min",])
ech_200 = unlist(replicate(100, recuit_simule_0(E , fonction_minimiser_2, -10, 200))["x_min",])
mat_ech = data.frame( n_10 =ech_10, n_50 =ech_50, n_200 = ech_200)
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(3))
legend("bottomleft", legend=c("i=10", "i=50","i=200"), lwd=3,col = rainbow(3))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisé", ylim=c(6,-6), col = rainbow(3))
legend("bottomleft", legend=c("i=10", "i=50","i=200"), lwd=3,col = rainbow(3))
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisée", ylim=c(6,-6), col = rainbow(3),
ylim="minimum trouvé", xlab = "")
matplot(1:100 , mat_ech, type="l", lwd = 3, main="Graphique des résultats renvoyé en \n fonction du nombre d'itération autorisée", ylim=c(6,-6), col = rainbow(3),
ylab="minimum trouvé", xlab = "")
legend("bottomleft", legend=c("i=10", "i=50","i=200"), lwd=3,col = rainbow(3))
cumsum(Q_trans[5,])
test = 1:6
test
sum(test<5)
test < 5
test[3]
test = 9:15
test
test[3]
test < 11
sum(test < 11)
test[2]
etat = seq(-10, 10, 0.1)
etat = 1:5
etat = etat/sum(etat)
cumsum(etat)
etat = cumsum(etat)
etat < runif(1)
knitr::opts_chunk$set(echo = TRUE)
setwd( getwd() )
#Chargement des packages
library(readr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(FactoMineR) #Pour l'ACP
knitr::opts_chunk$set(echo = TRUE)
setwd( getwd() )
#Chargement des packages
library(readr)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(FactoMineR) #Pour l'ACP
base = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
head(base)
summary(base)
#Individu ayant des valeur manquante pour la variable : GDP.Quarter.over.Quarterr
base[which(is.na(base$GDP.Quarter.over.Quarterr)),]
#Individu ayant des valeur manquante pour la variable : Interest.Rate
# base[which(is.na(base$Interest.Rate)),] #<----- Renvoi le Kosovo (deja renvoyé)
#Elimination des lignes contenant des valeurs manquante
base = na.omit(base[-which(row.names(base)=="Euro Area"),])
# Création d'une fonction pour les boxplots
graph_TD.bp <- function(uneVariable){
ggplot(data = base, aes_string(x = "factor(0)", y = uneVariable)) +
geom_boxplot() + xlab("") + ylab("") + ggtitle(uneVariable)
}
# Appliquer la fonction aux différentes variables
p1.bp <- graph_TD.bp("GDP")
p2.bp <- graph_TD.bp("Interest.Rate")
p3.bp <- graph_TD.bp("Inflation.Rate")
p4.bp <- graph_TD.bp("Gov..Budget")
p5.bp <- graph_TD.bp("Debt.GDP")
p6.bp <- graph_TD.bp("Current.Account")
p7.bp <- graph_TD.bp("Population")
p8.bp <- graph_TD.bp("GDP.Year.over.Year")
p9.bp <- graph_TD.bp("GDP.Quarter.over.Quarterr")
# Organiser les boxplots en grille
# Création d'une fonction pour les boxplots
graph_TD.bp <- function(uneVariable){
ggplot(data = base, aes_string(x = "factor(0)", y = uneVariable)) +
geom_boxplot() + xlab("") + ylab("") + ggtitle(uneVariable)
}
# Appliquer la fonction aux différentes variables
p1.bp <- graph_TD.bp("GDP")
p2.bp <- graph_TD.bp("Interest.Rate")
p3.bp <- graph_TD.bp("Inflation.Rate")
p4.bp <- graph_TD.bp("Gov..Budget")
p5.bp <- graph_TD.bp("Debt.GDP")
p6.bp <- graph_TD.bp("Current.Account")
p7.bp <- graph_TD.bp("Population")
p8.bp <- graph_TD.bp("GDP.Year.over.Year")
p9.bp <- graph_TD.bp("GDP.Quarter.over.Quarterr")
# Organiser les boxplots en grille
grid.arrange(p1.bp, p7.bp, p2.bp , ncol = 3)
base$GDPPA = (base$GDP)/base$Population #PIB par tête (en millier)
graph_TD.bp("GDPPA")
grid.arrange(p3.bp, p8.bp, p9.bp , ncol = 3)
grid.arrange(p4.bp, p5.bp, p6.bp , ncol = 3)
# # Modifier la taille de la fenêtre
# options(repr.plot.width = 20, repr.plot.height = 6)
# Création d'une fonction pour créer des graphiques
graph_TD <- function(uneVariable){
ggplot(data = base, aes_string(x = uneVariable, y = "Jobless.Rate")) + geom_point()
}
# Graphique du taux de chômage en fonction de chaque variable 1 à 1
p1 <- graph_TD("GDP")
p2 <- graph_TD("Interest.Rate")
p3 <- graph_TD("Inflation.Rate")
p4 <- graph_TD("Gov..Budget")
p5 <- graph_TD("Debt.GDP")
p6 <- graph_TD("Current.Account")
p7 <- graph_TD("Population")
p8 <- graph_TD("GDP.Quarter.over.Quarterr")
p9 <- graph_TD("GDP.Year.over.Year")
p10 <- graph_TD("GDPPA")
grid.arrange(p1, p7, p10, p2, ncol = 2)
grid.arrange(p3, p4, p5, p6,  ncol = 2)
grid.arrange(p8,p9, ncol = 2)
# La variable dépendante est Jobless.Rate
base <- base[, c("GDP", "GDP.Year.over.Year", "GDP.Quarter.over.Quarterr", "Interest.Rate", "Inflation.Rate", "Gov..Budget", "Debt.GDP", "Current.Account", "Population", "Jobless.Rate", "GDPPA")]
# Calcul des corrélations
correlation_matrix <- cor(base)
# Modifier la taille de la sortie
options(repr.plot.width = 8, repr.plot.height = 10)
# Corrélation avec la variable dépendante (Jobless.Rate)
cor_with_dependent <- correlation_matrix["Jobless.Rate", -10]
# Affichage de la matrice de corrélation
corrplot(cor(base), method = "circle", tl.cex = 0.5, tl.col = "black", diag = F, type="upper" )
#Rajout de Belorus
base2 = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base2 = base2[, - which(colnames(base2)=="GDP.Quarter.over.Quarterr")]
base2 = na.omit(base2[-which(row.names(base2)=="Euro Area"),])
base2$GDPPA = (base2$GDP)/base2$Population
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"))
barplot( acp_base2$eig[,2] )
base = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base$GDPPA = (base$GDP)/base$Population
head(base)
colnames(base)
base = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base$GDPPA = (base$GDP)/base$Population
base[, c("Jobless.Rate","GDPPA","GDP.Year.over.Year","GDP.Quarter.over.Quarterr",
"Interest.Rate","Inflation.Rate","Gov..Budget","Debt.GDP","Current.Account","Population")]
head(base)
head(base)
base = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base$GDPPA = (base$GDP)/base$Population
base = base[, c("Jobless.Rate","GDPPA","GDP.Year.over.Year","GDP.Quarter.over.Quarterr",
"Interest.Rate","Inflation.Rate","Gov..Budget","Debt.GDP","Current.Account","Population")]
base = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base$GDPPA = (base$GDP)/base$Population
base = base[, c("Jobless.Rate","GDPPA","GDP.Year.over.Year","GDP.Quarter.over.Quarterr",
"Interest.Rate","Inflation.Rate","Gov..Budget","Debt.GDP","Current.Account","Population")]
head(base)
summary(base)
#Individu ayant des valeur manquante pour la variable : GDP.Quarter.over.Quarterr
base[which(is.na(base$GDP.Quarter.over.Quarterr)),]
#Individu ayant des valeur manquante pour la variable : Interest.Rate
# base[which(is.na(base$Interest.Rate)),] #<----- Renvoi le Kosovo (deja renvoyé)
#Elimination des lignes contenant des valeurs manquante
base = na.omit(base[-which(row.names(base)=="Euro Area"),])
# Création d'une fonction pour les boxplots
graph_TD.bp <- function(uneVariable){
ggplot(data = base, aes_string(x = "factor(0)", y = uneVariable)) +
geom_boxplot() + xlab("") + ylab("") + ggtitle(uneVariable)
}
# Appliquer la fonction aux différentes variables
p1.bp <- graph_TD.bp("GDPPA")
p2.bp <- graph_TD.bp("Interest.Rate")
p3.bp <- graph_TD.bp("Inflation.Rate")
p4.bp <- graph_TD.bp("Gov..Budget")
p5.bp <- graph_TD.bp("Debt.GDP")
p6.bp <- graph_TD.bp("Current.Account")
p7.bp <- graph_TD.bp("GDP.Year.over.Year")
p8.bp <- graph_TD.bp("GDP.Quarter.over.Quarterr")
# Organiser les boxplots en grille
# Création d'une fonction pour les boxplots
graph_TD.bp <- function(uneVariable){
ggplot(data = base, aes_string(x = "factor(0)", y = uneVariable)) +
geom_boxplot() + xlab("") + ylab("") + ggtitle(uneVariable)
}
# Appliquer la fonction aux différentes variables
p0.bp <- graph_TD.bp("Jobless.Rate")
p1.bp <- graph_TD.bp("GDPPA")
p2.bp <- graph_TD.bp("Interest.Rate")
p3.bp <- graph_TD.bp("Inflation.Rate")
p4.bp <- graph_TD.bp("Gov..Budget")
p5.bp <- graph_TD.bp("Debt.GDP")
p6.bp <- graph_TD.bp("Current.Account")
p7.bp <- graph_TD.bp("GDP.Year.over.Year")
p8.bp <- graph_TD.bp("GDP.Quarter.over.Quarterr")
# Organiser les boxplots en grille
grid.arrange(p0.bp, p1.bp, p2.bp , ncol = 3)
base
head(base)
head(sorted(base))
sort(base)
order(base)
base
base[order(base, decreasing = T),]
head(base[order(base, decreasing = T),])
grid.arrange(p3.bp, p8.bp, p9.bp , ncol = 3)
grid.arrange(p4.bp, p5.bp, p6.bp , ncol = 3)
# # Modifier la taille de la fenêtre
# options(repr.plot.width = 20, repr.plot.height = 6)
# Création d'une fonction pour créer des graphiques
graph_TD <- function(uneVariable){
ggplot(data = base, aes_string(x = uneVariable, y = "Jobless.Rate")) + geom_point()
}
grid.arrange(p1, p7, p8, p2, ncol = 2)
# Graphique du taux de chômage en fonction de chaque variable 1 à 1
p1 <- graph_TD("GDPPA")
p2 <- graph_TD("Interest.Rate")
p3 <- graph_TD("Inflation.Rate")
p4 <- graph_TD("Gov..Budget")
p5 <- graph_TD("Debt.GDP")
p6 <- graph_TD("Current.Account")
p7 <- graph_TD("GDP.Year.over.Year")
p8 <- graph_TD("GDP.Quarter.over.Quarterr")
grid.arrange(p1,  p2, p7, p8, ncol = 2)
grid.arrange(p3, p4, p5, p6,  ncol = 2)
# Affichage de la matrice de corrélation
corrplot(cor(base), method = "circle", tl.cex = 0.5, tl.col = "black", diag = F, type="upper" )
# La variable dépendante est Jobless.Rate
base <- base[, c("GDPPA", "GDP.Year.over.Year", "GDP.Quarter.over.Quarterr", "Interest.Rate", "Inflation.Rate", "Gov..Budget", "Debt.GDP", "Current.Account", "Jobless.Rate")]
# Calcul des corrélations
correlation_matrix <- cor(base)
# Modifier la taille de la sortie
options(repr.plot.width = 8, repr.plot.height = 10)
# Corrélation avec la variable dépendante (Jobless.Rate)
cor_with_dependent <- correlation_matrix["Jobless.Rate", -10]
# Affichage de la matrice de corrélation
corrplot(cor(base), method = "circle", tl.cex = 0.5, tl.col = "black", diag = F, type="upper" )
#Rajout de Belorus
base2 = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base2$GDPPA = (base2$GDP)/base2$Population
base2 = base2[, c("Jobless.Rate","GDPPA","GDP.Year.over.Year","GDP.Quarter.over.Quarterr",
"Interest.Rate","Inflation.Rate","Gov..Budget","Debt.GDP","Current.Account","Population")]
#Suppression de la variablr
base2 = base2[, - which(colnames(base2)=="GDP.Quarter.over.Quarterr")]
base2 = na.omit(base2[-which(row.names(base2)=="Euro Area"),])
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"))
barplot( acp_base2$eig[,2] )
#Rajout de Belorus
base2 = read.table("data/Economy_Indicators.csv" , sep = ",", dec = "." , header = T , na.strings = "NA" , row.names = "Country")
base2$GDPPA = (base2$GDP)/base2$Population
base2 = base2[, c("Jobless.Rate","GDPPA","GDP.Year.over.Year","GDP.Quarter.over.Quarterr",
"Interest.Rate","Inflation.Rate","Gov..Budget","Debt.GDP","Current.Account")]
#Suppression de la variablr
base2 = base2[, - which(colnames(base2)=="GDP.Quarter.over.Quarterr")]
base2 = na.omit(base2[-which(row.names(base2)=="Euro Area"),])
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"))
barplot( acp_base2$eig[,2] )
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"))
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"), graph = F)
acp_base2 = PCA(base2, scale.unit = T, quanti.sup = c("Jobless.Rate"), graph = F)
plot(acp_base2, choix = "var")
plot(acp_base2, choix = "ind")
(14+17.5)/2
setwd("C:/Users/riri_/OneDrive/Bureau/M1_MAS_S8/UE_spe_R1/Econometrie_avance/ProjetEA")
install.packages("pacman")
install.packages("pacman")
help(dummyVars)
knitr::opts_knit$set(root.dir = normalizePath(getwd()), echo = F, comment = NA)
#Initialisation de l'environnement de travail et  chargement des packages
setwd(getwd())
#Installation de pacman pour faciliter l'installation et le chargement des package
#install.packages("pacman")
#library(pacman)
#Chargement des package
pacman::p_load(rmdformats, dplyr, readxl, tidyverse, ggplot2, lmtest, gmm, corrplot, stargazer, ivreg, AER, FactoMineR, sf, leaflet, pls, caret, mlr3tuning, pls,DoubleML,kableExtra,mlr3,mlr3learners,data.table, ggpubr, paradox)
install.packages("caret")
#Initialisation de l'environnement de travail et  chargement des packages
setwd(getwd())
#Installation de pacman pour faciliter l'installation et le chargement des package
#install.packages("pacman")
#library(pacman)
#Chargement des package
pacman::p_load(rmdformats, dplyr, readxl, tidyverse, ggplot2, lmtest, gmm, corrplot, stargazer, ivreg, AER, FactoMineR, sf, leaflet, pls, caret, mlr3tuning, pls,DoubleML,kableExtra,mlr3,mlr3learners,data.table, ggpubr, paradox)
library(caret)
library(caret)
